---
import type { GetStaticPathsOptions, InferGetStaticPropsType } from 'astro';
import { getCollection } from 'astro:content';

import HorizontalCard from '@components/HorizontalCard.astro';
import BaseLayout from '@layouts/BaseLayout.astro';
import { createSlug } from '@lib/create-slug';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
  const allPosts = await getCollection('blog');
  type Post = (typeof allPosts)[number];

  const tagPostMap = new Map<string, Post[]>();
  for (const post of allPosts) {
    if (post.data.tags === undefined) {
      continue;
    }

    for (const tag of post.data.tags) {
      const postList = tagPostMap.get(tag);
      if (postList === undefined) {
        tagPostMap.set(tag, [post]);
        continue;
      }

      postList.push(post);
    }
  }

  return [...tagPostMap.entries()].flatMap(([tag, filteredPosts]) => {
    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 10,
    });
  });
}

type Params = {
  tag: string;
};

const { page } = Astro.props as InferGetStaticPropsType<typeof getStaticPaths>;
const params = Astro.params as Params;
---

<BaseLayout title={'Blog - ' + params.tag} sideBarActiveItemId="blog">
  <div class="mb-5">
    <div class="text-3xl w-full font-bold">Blog - {params.tag}</div>
  </div>
  {
    page.data.length === 0 ? (
      <div class="bg-base-200 border-l-4 border-secondary w-full p-4 min-w-full">
        <p class="font-bold">Sorry!</p>
        <p>There are no blog posts to show at the moment. Check back later!</p>
      </div>
    ) : (
      <ul>
        {page.data.map((post) => (
          <>
            <HorizontalCard
              title={post.data.title}
              heroImgSrc={post.data.heroImage}
              description={post.data.description}
              url={'/blog/' + createSlug(post.data.title, post.slug)}
              target="_self"
              badge={post.data.badge}
              tags={post.data.tags}
            />
            <div class="divider my-0" />
          </>
        ))}
      </ul>
    )
  }

  <div class="flex justify-between">
    {
      page.url.prev ? (
        <a href={page.url.prev} class="btn btn-ghost my-10 mx-5">
          {' '}
          <svg
            class="h-6 w-6 fill-current md:h-8 md:w-8"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
          >
            <path d="M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z" />
          </svg>{' '}
          Recent posts
        </a>
      ) : (
        <div />
      )
    }
    {
      page.url.next ? (
        <a href={page.url.next} class="btn btn-ghost my-10 mx-5">
          Older Posts{' '}
          <svg
            class="h-6 w-6 fill-current md:h-8 md:w-8"
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
          >
            {' '}
            <path d="M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z" />
          </svg>
        </a>
      ) : (
        <div />
      )
    }
  </div>
</BaseLayout>
