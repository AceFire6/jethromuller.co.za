---
import type { ImageMetadata } from 'astro';
import { getImage, Image } from 'astro:assets';

interface Props {
  title: string;
  heroImgSrc?: string | ImageMetadata;
  description: string;
  url: string;
  badge?: string;
  tags?: string[];
  target?: string;
}

const { title, heroImgSrc, description, url, badge, tags, target = '_blank' } = Astro.props;

// Annoying requirement to make the Image types happy
let resolvedImageSrc: string | undefined;
if (heroImgSrc !== undefined) {
  if (typeof heroImgSrc === 'string') {
    resolvedImageSrc = heroImgSrc;
  } else {
    const imageData = await getImage({ src: heroImgSrc });
    resolvedImageSrc = imageData.src;
  }
}

const tagUrl = url.split('/').slice(0, -1).join('/') + '/tag';
---

<div class="rounded-lg bg-base-100 hover:shadow-xl transition ease-in-out hover:scale-[102%]">
  <a href={url} target={target}>
    <div class="hero-content flex-col md:flex-row">
      {
        resolvedImageSrc && (
          <Image
            src={resolvedImageSrc}
            width={750}
            height={422}
            format="webp"
            alt={title}
            class="max-w-full md:max-w-[13rem] rounded-lg"
          />
        )
      }
      <div class="grow w-full">
        <h1 class="text-xl font-bold">
          {title}
          {badge && <div class="badge badge-secondary mx-2">{badge}</div>}
        </h1>
        <p class="py-1 text-1xl">{description}</p>
        <div class="card-actions justify-end">
          {
            tags?.map((tag) => (
              <a href={`${tagUrl}/${tag}`} class="badge badge-outline">
                {tag}
              </a>
            ))
          }
        </div>
      </div>
    </div>
  </a>
</div>
